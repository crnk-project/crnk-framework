import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import proguard.gradle.ProGuardTask

apply plugin: 'java'
sourceSets {
	shrinked
}

configurations {
	shrinked.extendsFrom compile
	shrinked.extendsFrom runtime
}

buildscript {
	dependencies {
		classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"

		classpath 'net.sf.proguard:proguard-gradle:6.0.3'
	}
}

apply plugin: 'net.ltgt.apt'

sourceSets {
	main {
		java {
			srcDir 'build/generated/source/apt/main'
		}
	}
}

dependencies {
	compile project(':crnk-setup:crnk-setup-vertx')
	compile project(':crnk-home')
	compile project(':crnk-security')

	// add in the future
	// compile project(':crnk-meta')
	// compile project(':crnk-operations')
	// compile project(':crnk-ui')
	// compile project(':crnk-validation')

	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'javax.inject:javax.inject:1'
	compile 'com.google.dagger:dagger:2.16'

	annotationProcessor 'com.google.dagger:dagger-compiler:2.16'
}


task proguard(type: ProGuardTask) {
	dependsOn jar
	configuration 'proguard.txt'

	injars "$buildDir/libs/dagger-vertx-example-${version}.jar"
	injars configurations.compile.files
	outjars "$buildDir/libs/dagger-vertx-example-min-${version}.jar"
}

// https://github.com/immutables/immutables/issues/134
// issues with incremental compilation
compileJava {
	options.incremental = false
}
def generatedSrcRoot = file("${buildDir}/generated/source/apt/main")
task deleteGeneratedSources(type: Delete) {
	delete generatedSrcRoot
}
tasks.withType(JavaCompile) { it.dependsOn('deleteGeneratedSources') }

// startup

apply plugin: 'application'
distributions {
	main {
		main {
			contents {
				from { proguard.outputs.files } {
					into 'lib'
				}
				include "**/dagger-vertx-example"
				include "**/dagger-vertx-example.bat"
				include "**/*-min-*.jar"
			}
		}
	}
}


apply plugin: 'com.bmuschko.docker-java-application'


startScripts {
	dependsOn proguard
}


mainClassName = 'io.crnk.example.vertx.VertxApplication'


dockerDistTar {
	environmentVariable('JAVA_HOME', '/opt/java/openjdk/jdk-10.0.1+10')
}


docker {
	javaApplication {
		baseImage = 'adoptopenjdk/openjdk10-openj9:nightly'
		maintainer = '"remo@adnovum.ch"'
		ports = [8080]
		tag = "crnk/example-dagger-vertx:$project.version"
	}

	registryCredentials {
		email = 'remo@adnovum.ch'
		username = dockerHubUser
		password = dockerHubPass
	}
}

task dockerCreateContainer(type: DockerCreateContainer) {
	dependsOn dockerBuildImage
	targetImageId { dockerBuildImage.getImageId() }
	portBindings = ['8080:8080']
}

task dockerStartContainer(type: DockerStartContainer) {
	dependsOn dockerCreateContainer
	targetContainerId { dockerCreateContainer.getContainerId() }
}

task dockerStopContainer(type: DockerStopContainer) {
	targetContainerId { dockerCreateContainer.getContainerId() }
}

apply plugin: 'java'

task runMin(type: JavaExec) {
	classpath = files(proguard.outputs.files.singleFile)
	main = 'io.crnk.example.vertx.VertxApplication'
}