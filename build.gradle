import java.text.SimpleDateFormat

// tag::versions[]
buildscript {
	dependencies {
		apply from: "versions.gradle"

		def depMgmtVersion = versions['dependency.management.plugin.version']

		classpath "io.spring.gradle:dependency-management-plugin:${depMgmtVersion}"
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
		classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
		classpath 'com.moowork.gradle:gradle-node-plugin:1.1.1'
		classpath 'org.ajoberstar:gradle-git-publish:0.2.1'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5-rc1'
	}
}

wrapper {
	gradleVersion = '3.5'
}

// note that a production build creates javadoc, sources jars and signatures undesired during development
// for performance reasons
def isProductionBuild = System.env.NEXUS_DEPLOY_USER != null
ext {
	timestampedVersion = isProductionBuild
}

SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss")
if (ext.timestampedVersion) {
	version = BUILD_VERSION_PREFIX + "." + format.format(new Date())
}
else {
	version = '0.0.0-SNAPSHOT'
}
group = GROUP_ID

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

gradle.beforeProject { Project project ->
	project.with {
		apply plugin: 'maven'

		def docs = project.name == 'crnk-documentation'
		def ui = project.name == 'crnk-ui'
		def examples = project.name.contains('example')

		if (!docs) {
			apply plugin: 'java'
			sourceCompatibility = 1.7
			targetCompatibility = 1.7

			dependencies {
				testCompile group: 'junit', name: 'junit', version: '4.12'
				testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
				testCompile group: 'org.assertj', name: 'assertj-core', version: '2.2.0'
			}
		}

		if (!docs && !examples) {
			// https://about.sonarqube.com/get-started/
			apply plugin: "org.sonarqube"
			apply plugin: "jacoco"

			jacoco {
				toolVersion = "0.7.6.201602180812"
			}
		}

		apply plugin: 'maven-publish'


		if (!docs && !examples && isProductionBuild) {

			apply plugin: 'signing'


			task sourcesJar(type: Jar) {
				from sourceSets.main.allSource
				classifier = 'sources'
			}

			task javadocJar(type: Jar, dependsOn: 'javadoc') {
				from javadoc.destinationDir
				classifier = 'javadoc'
			}

			artifacts {
				archives jar
				archives javadocJar
				archives sourcesJar
			}

			signing {
				required {
					gradle.taskGraph.hasTask("uploadArchives")
				}
				sign configurations.archives
			}

			uploadArchives {
				repositories {
					mavenDeployer {
						beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

						if(!System.env.NEXUS_DEPLOY_PASS){
							throw new IllegalStateException("NEXUS_DEPLOY_PASS not specified in environment")
						}

						repository(url: NEXUS_DEPLOY_URL){
							authentication (
								userName: System.env.NEXUS_DEPLOY_USER,
								password: System.env.NEXUS_DEPLOY_PASS
							)

							// that plugin does not make use of global proxy settings :-(
							def proxyHost = System.getProperty("https.proxyHost")
							def proxyPort = System.getProperty("https.proxyPort")
							if(proxyHost && proxyPort){
								proxy(host: proxyHost, port: Integer.parseInt(proxyPort), type: 'http')
							}
						}

						pom.project {
							name project.name
							description 'JSON API framework for Java'
							url 'http://www.crnk.io'
							scm {
								url 'https://github.com/crnk-project/crnk-framework'
								connection 'scm:git:git://github.com/crnk-project/crnk-framework.git'
								developerConnection 'scm:git:git@github.com:crnk-project/crnk-framework.git'
							}
							licenses {
								license {
									name 'The Apache Software License, Version 2.0'
									url 'http://www.apache.org/licenses/LICENSE-2.0.html'
									distribution 'repo'
								}
							}
							issueManagement {
								system 'GitHub'
								url 'https://github.com/crnk-project/crml-framework/issues'
							}
							developers {
								developer {
									id 'crnk.io'
									name 'crnk.io'
									email 'info@crnk.io'
								}
							}
						}
					}
				}
			}

			tasks.publish.dependsOn(tasks.uploadArchives)

		}

	}
}

