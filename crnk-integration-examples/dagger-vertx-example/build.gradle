import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import proguard.gradle.ProGuardTask

apply plugin: 'java'
sourceSets {
    shrinked
}

configurations {
    shrinked.extendsFrom compile
    shrinked.extendsFrom runtime
}

buildscript {
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
		classpath 'com.guardsquare:proguard-gradle:7.3.2'
	}
}

sourceSets {
    main {
        java {
            srcDir 'build/generated/sources/apt/main'
        }
    }
}

dependencies {
    implementation project(':crnk-setup:crnk-setup-vertx')
    implementation project(':crnk-home')
    implementation project(':crnk-security')
    implementation project(':crnk-data:crnk-data-facet')
    implementation project(':crnk-data:crnk-data-jpa')
    implementation project(':crnk-validation')
    implementation project(':crnk-format:crnk-format-plain-json')

    implementation 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
	implementation 'org.hibernate:hibernate-core-jakarta:5.6.15.Final'
    implementation 'org.hibernate:hibernate-entitymanager:5.6.15.Final'
    implementation  'com.h2database:h2:2.2.224'

    implementation 'io.vertx:vertx-auth-common:4.4.5'
	implementation 'io.projectreactor.addons:reactor-adapter:3.5.1'


	// add in the future
    // implementation project(':crnk-meta')
    // implementation project(':crnk-operations')
    // implementation project(':crnk-ui')

    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation 'com.google.dagger:dagger:2.48'

    annotationProcessor 'com.google.dagger:dagger-compiler:2.48'
}

// https://github.com/immutables/immutables/issues/134 issues with incremental compilation
compileJava {
    options.incremental = false
}
def generatedSrcRoot = file("${buildDir}/generated/sources/apt/main")
task deleteGeneratedSources(type: Delete) {
    delete generatedSrcRoot
}
tasks.withType(JavaCompile) { it.dependsOn('deleteGeneratedSources') }

// shrinking requires Java 10
if (JavaVersion.current() != JavaVersion.VERSION_1_8) {

    task proguard(type: ProGuardTask) {
        dependsOn jar
        configuration 'proguard.txt'

        injars "$buildDir/libs/dagger-vertx-example-${version}.jar"
        injars configurations.compile.files
        outjars "$buildDir/libs/dagger-vertx-example-min-${version}.jar"
    }

    apply plugin: 'application'
    distributions {
        main {
            main {
                contents {
                    from { proguard.outputs.files } {
                        into 'lib'
                    }
                    include "**/dagger-vertx-example"
                    include "**/dagger-vertx-example.bat"
                    include "**/*-min-*.jar"
                }
            }
        }
    }


    apply plugin: 'com.bmuschko.docker-java-application'

    startScripts {
        dependsOn proguard
        classpath = files(proguard.outputs.files.singleFile)
    }


    mainClassName = 'io.crnk.example.vertx.AppMain'

	dockerCreateDockerfile {
        environmentVariable('JAVA_HOME', '/opt/java/openjdk/jdk-10.0.1+10')
    }

    docker {
        javaApplication {
            baseImage = 'adoptopenjdk/openjdk10-openj9:nightly'
            maintainer = '"remo@adnovum.ch"'
            ports = [8080]
            images = ["crnk/example-dagger-vertx:$project.version"]
        }

        registryCredentials {
            email = 'remo@adnovum.ch'
            username = dockerHubUser
            password = dockerHubPass
        }
    }

    task dockerCreateContainer(type: DockerCreateContainer) {
        dependsOn dockerBuildImage
        targetImageId { dockerBuildImage.getImageId() }
		hostConfig.portBindings = ['8080:8080']
    }

    task dockerStartContainer(type: DockerStartContainer) {
        dependsOn dockerCreateContainer
        targetContainerId { dockerCreateContainer.getContainerId() }
    }

    task dockerStopContainer(type: DockerStopContainer) {
        targetContainerId { dockerCreateContainer.getContainerId() }
    }

    task dockerRemoveContainer(type: DockerRemoveContainer) {
        dependsOn dockerStopContainer
        targetContainerId { dockerCreateContainer.getContainerId() }
    }

    task runMin(type: JavaExec) {
        dependsOn proguard
        classpath = files(proguard.outputs.files.singleFile)
        main = 'io.crnk.example.vertx.VertxApplication'
    }
}
